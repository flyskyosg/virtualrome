############################################################
#
# npOSG4Web Sub Project
#
# Firefox Plugin
#
############################################################

PROJECT(npOSG4Web)


############################################################
#
# FIXME: da finire
#
############################################################

IF(NOT OSG4WEB_ROOT)
	GET_FILENAME_COMPONENT(OSG4WEB_ROOT "${PROJECT_SOURCE_DIR}/../.." ABSOLUTE CACHE)
ENDIF(NOT OSG4WEB_ROOT)

	
FOREACH(myvar include idl src res)
	SET("${PROJECT_NAME}_${myvar}" ${OSG4WEB_ROOT}/${myvar}/${PROJECT_NAME} CACHE PATH "${myvar} dir for ${PROJECT_NAME}")
	MARK_AS_ADVANCED("${PROJECT_NAME}_${myvar}")
	GRAB_FILES("${PROJECT_NAME}_${myvar}")
ENDFOREACH(myvar)

IF(WIN32)
        SET(${PROJECT_NAME}_src_FILES ${${PROJECT_NAME}_src_FILES} ${${PROJECT_NAME}_res_FILES})
ENDIF(WIN32)


FOREACH(myvar include src)
#	SET("CommonShell_${myvar}" ${OSG4WEB_ROOT}/${myvar}/CommonShell CACHE PATH "${myvar} dir for CommonShell")
#	MARK_AS_ADVANCED("CommonShell_${myvar}")
	SET("CommonShell_${myvar}" ${OSG4WEB_ROOT}/${myvar}/CommonShell)
	GRAB_FILES("CommonShell_${myvar}")
ENDFOREACH(myvar)

SET(GeckoSDK_ROOT ${OSG4WEB_ROOT}/var/dependancies/gecko-sdk CACHE PATH "base dir for Firefox Gecko SDK")
FIND_PACKAGE(GeckoSDK QUIET)
IF(NOT GeckoSDK_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(GeckoSDK)
ENDIF(NOT GeckoSDK_FOUND)

IF(CURL_LIBRARY)
	ADD_DEFINITIONS(-DHAVE_CONFIG_H -DCURL_STATICLIB)
ELSE(CURL_LIBRARY)
	MESSAGE(FATAL_ERROR "Curl NOT FOUND")
ENDIF(CURL_LIBRARY)	
##da mettere sotto option
IF(${PLACE_IN_PLUGIN})
	ADD_DEFINITIONS(-DNPOSG4WEB_COREDIR_PLUGIN)
ENDIF(${PLACE_IN_PLUGIN})

IF(MSVC)
        SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:LIBCMT")
        SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /NODEFAULTLIB:LIBCMT")
ENDIF(MSVC)

SET(UNRAR_ROOT ${OSG4WEB_ROOT}/var/dependancies/unrarlib CACHE PATH "base dir for UnRAR Library")
FIND_PACKAGE(UNRAR QUIET)
IF(NOT UNRAR_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(UNRAR)
ENDIF(NOT UNRAR_FOUND)

#set up folder for generated include files
SET(${PROJECT_NAME}_GEN_INC_DIR ${CMAKE_CURRENT_BINARY_DIR}/include)
FILE(MAKE_DIRECTORY ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME})
SET(IDL_FILENAME npOSG4Web_nsIScriptablePlugin)

INCLUDE_DIRECTORIES(
	${GeckoSDK_INCLUDE_DIR}
	${CURL_INCLUDE_DIR}
	${UNRAR_INCLUDE_DIR}
	${${PROJECT_NAME}_GEN_INC_DIR} 
)
IF(MSVC)
#	ADD_DEFINITIONS(-DMOZILLA_STRICT_API -DXPCOM_GLUE -DXP_WIN -D_DXP_WIN32 -D_X86_ -D_USRDLL -D_WIN32_WINNT=0x0400)
	ADD_DEFINITIONS(-DMOZILLA_STRICT_API -DXPCOM_GLUE -DXP_WIN -D_X86_ -D_USRDLL -D_WIN32_WINNT=0x0400)
ENDIF(MSVC)

SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_GEN_INC_DIR}/${IDL_FILENAME}.h PROPERTIES GENERATED ON)

ADD_DEFINITIONS(-DOSG4WEB_UTILITIES_LIBRARY_STATIC)

ADD_LIBRARY(${PROJECT_NAME}
    MODULE
    ${CommonShell_include_FILES}
    ${${PROJECT_NAME}_include_FILES}
    ${${PROJECT_NAME}_GEN_INC_DIR}/${IDL_FILENAME}.h
    ${CommonShell_src_FILES}
    ${${PROJECT_NAME}_src_FILES}
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GeckoSDK_NSPR4_LIBRARY} ${GeckoSDK_XPCOM_LIBRARY} ${GeckoSDK_PLC4_LIBRARY} ${GeckoSDK_PLDS4_LIBRARY}  ${UNRAR_LIBRARY} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} optimized ${CURL_LIBRARY} debug ${CURL_LIBRARY_DEBUG} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} Utilities )

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PROJECT_LABEL "Shell_${PROJECT_NAME}")

IF(FIREFOX_PLUGIN_DIR)
	GET_TARGET_PROPERTY(${PROJECT_NAME}_LOCATION ${PROJECT_NAME} LOCATION)
	GET_FILENAME_COMPONENT( MYNAME ${${PROJECT_NAME}_LOCATION} NAME)

###############################################################
#
# Pre Build Actions
#
###############################################################

	ADD_CUSTOM_COMMAND(
		TARGET ${PROJECT_NAME}
		PRE_BUILD
		COMMAND ${GeckoSDK_XPIDL_EXECUTABLE} 
		ARGS -w -v -m header -I${GeckoSDK_IDL_DIR} ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
		COMMAND ${GeckoSDK_XPIDL_EXECUTABLE} 
		ARGS -w -v -m typelib -I${GeckoSDK_IDL_DIR} ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
		COMMAND ${GeckoSDK_XPT_LINK_EXECUTABLE} 
		ARGS ${FIREFOX_PLUGIN_DIR}/${PROJECT_NAME}.xpt ${IDL_FILENAME}.xpt 
	)

###############################################################
#
# Post Build Actions
#
###############################################################

	ADD_CUSTOM_COMMAND(
		TARGET ${PROJECT_NAME}
		POST_BUILD
		COMMAND ${CMAKE_COMMAND}
    		ARGS -E copy ${${PROJECT_NAME}_LOCATION} ${FIREFOX_PLUGIN_DIR}
	)

	ADD_TEST(build_${PROJECT_NAME} ${CMAKE_CTEST_COMMAND}
		--build-and-test
		"${PROJECT_SOURCE_DIR}"
		"${PROJECT_BINARY_DIR}"
		--build-two-config
		--build-nocmake
		--build-generator ${CMAKE_GENERATOR}
		--build-makeprogram ${CMAKE_MAKE_PROGRAM}
		--build-project ${PROJECT_NAME}
		--build-target Shell_${PROJECT_NAME}
  		)
ENDIF(FIREFOX_PLUGIN_DIR)

