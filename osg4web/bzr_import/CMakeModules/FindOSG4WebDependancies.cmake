
################################################################################################
# this Macro find a generic dependency, handling debug suffix
# all the paramenter are required, in case of lists, use "" in calling
################################################################################################

MACRO(FIND_DEPENDENCY DEPNAME INCLUDEFILE LIBRARY_NAMES SEARCHPATHLIST DEBUGSUFFIX)

    MESSAGE(STATUS "searching ${DEPNAME} -->${INCLUDEFILE}<-->${LIBRARY}<-->${SEARCHPATHLIST}<--")
    
    SET(MY_PATH_INCLUDE )
    SET(MY_PATH_LIB )
    
    FOREACH( MYPATH ${SEARCHPATHLIST} )
        SET(MY_PATH_INCLUDE ${MY_PATH_INCLUDE} ${MYPATH}/include)
        SET(MY_PATH_LIB ${MY_PATH_LIB} ${MYPATH}/lib)
    ENDFOREACH( MYPATH ${SEARCHPATHLIST} )
        
    FIND_PATH("${DEPNAME}_INCLUDE_DIR" ${INCLUDEFILE}
      ${MY_PATH_INCLUDE}
    )
    MARK_AS_ADVANCED("${DEPNAME}_INCLUDE_DIR")
    MESSAGE( " ${DEPNAME}_INCLUDE_DIR --> ${${DEPNAME}_INCLUDE_DIR}<--")
    
    FIND_LIBRARY("${DEPNAME}_LIBRARY" 
        NAMES ${LIBRARY_NAMES}
      PATHS ${MY_PATH_LIB}
    )
    SET(LIBRARY_NAMES_DEBUG "")
    FOREACH(LIBNAME ${LIBRARY_NAMES})
        LIST(APPEND LIBRARY_NAMES_DEBUG "${LIBNAME}${DEBUGSUFFIX}")
    ENDFOREACH(LIBNAME)
    FIND_LIBRARY("${DEPNAME}_LIBRARY_DEBUG" 
        NAMES ${LIBRARY_NAMES_DEBUG}
      PATHS ${MY_PATH_LIB}
    )
    MARK_AS_ADVANCED("${DEPNAME}_LIBRARY")
    MESSAGE( " ${DEPNAME}_LIBRARY --> ${${DEPNAME}_LIBRARY}<--")
    SET( ${DEPNAME}_FOUND "NO" )
    IF(${DEPNAME}_INCLUDE_DIR AND ${DEPNAME}_LIBRARY)
      SET( ${DEPNAME}_FOUND "YES" )
      IF(NOT ${DEPNAME}_LIBRARY_DEBUG)
          MESSAGE("-- Warning Debug ${DEPNAME} not found, using: ${${DEPNAME}_LIBRARY}")
          SET(${DEPNAME}_LIBRARY_DEBUG "${${DEPNAME}_LIBRARY}")
      ENDIF(NOT ${DEPNAME}_LIBRARY_DEBUG)
    ENDIF(${DEPNAME}_INCLUDE_DIR AND ${DEPNAME}_LIBRARY)
ENDMACRO(FIND_DEPENDENCY DEPNAME INCLUDEFILE LIBRARY_NAMES SEARCHPATHLIST DEBUGSUFFIX)


MACRO(FIND_DEPENDENCY_IDL DEPNAME INCLUDEFILE LIBRARY_NAMES IDLFILE BINFILE SEARCHPATHLIST DEBUGSUFFIX)

    MESSAGE(STATUS "searching ${DEPNAME} -->${INCLUDEFILE}<-->${LIBRARY}<-->${SEARCHPATHLIST}<--")
    
    SET(MY_PATH_INCLUDE )
    SET(MY_PATH_LIB )
    
    FOREACH( MYPATH ${SEARCHPATHLIST} )
        SET(MY_PATH_INCLUDE ${MY_PATH_INCLUDE} ${MYPATH}/include)
        SET(MY_PATH_LIB ${MY_PATH_LIB} ${MYPATH}/lib)
	SET(MY_PATH_IDL ${MY_PATH_IDL} ${MYPATH}/idl)
	SET(MY_PATH_BIN ${MY_PATH_LIB} ${MYPATH}/bin)
    ENDFOREACH( MYPATH ${SEARCHPATHLIST} )
        
    FIND_PATH("${DEPNAME}_INCLUDE_DIR" ${INCLUDEFILE}
      ${MY_PATH_INCLUDE}
    )
    MARK_AS_ADVANCED("${DEPNAME}_INCLUDE_DIR")
    #MESSAGE( " ${DEPNAME}_INCLUDE_DIR --> ${${DEPNAME}_INCLUDE_DIR}<--")

    FIND_PATH("${DEPNAME}_IDL_DIR" ${IDLFILE}
      ${MY_PATH_IDL}
    )
    MARK_AS_ADVANCED("${DEPNAME}_IDL_DIR")

    FIND_PATH("${DEPNAME}_BIN_DIR" ${BINFILE}
      ${MY_PATH_BIN}
    )
    MARK_AS_ADVANCED("${DEPNAME}_BIN_DIR")
    
    FIND_LIBRARY("${DEPNAME}_LIBRARY" 
        NAMES ${LIBRARY_NAMES}
      PATHS ${MY_PATH_LIB}
    )
    SET(LIBRARY_NAMES_DEBUG "")
    FOREACH(LIBNAME ${LIBRARY_NAMES})
        LIST(APPEND LIBRARY_NAMES_DEBUG "${LIBNAME}${DEBUGSUFFIX}")
    ENDFOREACH(LIBNAME)
    FIND_LIBRARY("${DEPNAME}_LIBRARY_DEBUG" 
        NAMES ${LIBRARY_NAMES_DEBUG}
      PATHS ${MY_PATH_LIB}
    )
    MARK_AS_ADVANCED("${DEPNAME}_LIBRARY")
    #MESSAGE( " ${DEPNAME}_LIBRARY --> ${${DEPNAME}_LIBRARY}<--")
    SET( ${DEPNAME}_FOUND "NO" )
    IF(${DEPNAME}_INCLUDE_DIR AND ${DEPNAME}_LIBRARY)
      SET( ${DEPNAME}_FOUND "YES" )
      IF(NOT ${DEPNAME}_LIBRARY_DEBUG)
          MESSAGE("-- Warning Debug ${DEPNAME} not found, using: ${${DEPNAME}_LIBRARY}")
          SET(${DEPNAME}_LIBRARY_DEBUG "${${DEPNAME}_LIBRARY}")
      ENDIF(NOT ${DEPNAME}_LIBRARY_DEBUG)
    ENDIF(${DEPNAME}_INCLUDE_DIR AND ${DEPNAME}_LIBRARY)
ENDMACRO(FIND_DEPENDENCY_IDL DEPNAME INCLUDEFILE LIBRARY_NAMES IDLFILE BINFILE SEARCHPATHLIST DEBUGSUFFIX)


IF(WIN32)
	SET(CURRPLATFORM "win32")
ELSE(WIN32) #TODO: finire per le altre pioattaforme
	SET(CURRPLATFORM "todo")
ENDIF(WIN32)


MACRO(SEARCH_OSGDISTRO OSG_OSGDISTRO_BIN) #TODO: Multipiattaforma
	FIND_DEPENDENCY(OSG osg/Node osg "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGUTIL osgUtil/ osgUtil "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGDB osgDB/Registry osgDB "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGGA osgGA/MatrixManipulator osgGA "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGFX osgFX/Registry osgFX "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGTEXT osgText/Text osgText "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGSIM osgSim/LightPointNode osgSim "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGMANIPULATOR osgManipulator/Dragger osgManipulator "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
	FIND_DEPENDENCY(OSGVIEWER osgViewer/Viewer osgViewer "${OSG_OSGDISTRO_BIN}/${CURRPLATFORM}" "D")
ENDMACRO(SEARCH_OSGDISTRO OSG_OSGDISTRO_BIN)

MACRO(SEARCH_GECKODISTRO GECKO_DISTRO_BIN) #TODO: Multipiattaforma
	FIND_DEPENDENCY_IDL(GECKOSDK nspr.h xpcom nsISupports.idl xpidl.exe "${GECKO_DISTRO_BIN}/${CURRPLATFORM}" "D")
ENDMACRO(SEARCH_GECKODISTRO GECKO_DISTRO_BIN)

