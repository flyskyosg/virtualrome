PROJECT(ieOSG4Web)
IF(NOT OSG4WEB_ROOT)
	GET_FILENAME_COMPONENT(OSG4WEB_ROOT "${PROJECT_SOURCE_DIR}/../.." ABSOLUTE CACHE)
ENDIF(NOT OSG4WEB_ROOT)

ADD_DEFINITIONS(-D_AFXDLL)
SET(CMAKE_MFC_FLAG 2) 
#ADD_EXECUTABLE(CMakeSetup WIN32 ${SRCS})   #NON SO A CHE SERVE... SENZA COMPILA LO STESSO

FOREACH(myvar include idl src res)
	SET("${PROJECT_NAME}_${myvar}" ${OSG4WEB_ROOT}/${myvar}/${PROJECT_NAME} CACHE PATH "${myvar} dir for ${PROJECT_NAME}")
	MARK_AS_ADVANCED("${PROJECT_NAME}_${myvar}")
	GRAB_FILES("${PROJECT_NAME}_${myvar}")
ENDFOREACH(myvar)

IF(WIN32)
        SET(${PROJECT_NAME}_src_FILES ${${PROJECT_NAME}_src_FILES} ${${PROJECT_NAME}_res_FILES})
ENDIF(WIN32)


FOREACH(myvar include src)
#	SET("CommonShell_${myvar}" ${OSG4WEB_ROOT}/${myvar}/CommonShell CACHE PATH "${myvar} dir for CommonShell")
#	MARK_AS_ADVANCED("CommonShell_${myvar}")
	SET("CommonShell_${myvar}" ${OSG4WEB_ROOT}/${myvar}/CommonShell)
	GRAB_FILES("CommonShell_${myvar}")
ENDFOREACH(myvar)

#TODO: Forse questo è togliere
SET(GeckoSDK_ROOT ${OSG4WEB_ROOT}/var/dependancies/gecko-sdk CACHE PATH "base dir for Firefox Gecko SDK")
FIND_PACKAGE(GeckoSDK QUIET)
IF(NOT GeckoSDK_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(GeckoSDK)
ENDIF(NOT GeckoSDK_FOUND)

SET(CURL_ROOT ${OSG4WEB_ROOT}/var/dependancies/cmcurl CACHE PATH "base dir for cURL Library")
FIND_PACKAGE(CURL QUIET)
ADD_DEFINITIONS(-DHAVE_CONFIG_H -DCURL_STATICLIB)

IF(MSVC)
        SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:LIBCMT,MSVCRT,MFCS,MSVCRTD,MFCSD")
        SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /NODEFAULTLIB:LIBCMT,MSVCRT,MFCS,MSVCRTD,MFCSD")
        SET(CURL_LIBRARY "${CURL_LIBRARY};ws2_32.lib ;winmm.lib")
        IF(MSVC71)
        	SET(ADDITIONAL_LIBRARY "optimized;mfcs71.lib;debug;mfcs71d.lib")
        ELSE(MSVC71)
        	IF(MSVC80)
        		SET(ADDITIONAL_LIBRARY "optimized;mfcs80.lib;debug;mfcs80d.lib")
        	ENDIF(MSVC80)
        ENDIF(MSVC71)

        SET(ADDITIONAL_LIBRARY "${ADDITIONAL_LIBRARY};optimized;msvcrt.lib;debug;msvcrtd.lib") 
ENDIF(MSVC)
IF(NOT CURL_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(CURL)
ENDIF(NOT CURL_FOUND)

SET(UNRAR_ROOT ${OSG4WEB_ROOT}/var/dependancies/unrarlib CACHE PATH "base dir for UnRAR Library")
FIND_PACKAGE(UNRAR QUIET)
IF(NOT UNRAR_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(UNRAR)
ENDIF(NOT UNRAR_FOUND)

#set up folder for generated include files
SET(${PROJECT_NAME}_GEN_INC_DIR ${CMAKE_CURRENT_BINARY_DIR}/include)
FILE(MAKE_DIRECTORY ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME})

SET(IDL_FILENAME ieOSG4Web)

ADD_CUSTOM_COMMAND(
	OUTPUT ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.tlb ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME}/${IDL_FILENAME}.h
	COMMAND midl.exe /D "_DEBUG" /nologo /char signed /env win32 /tlb ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.tlb /h  ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME}/${IDL_FILENAME}.h ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl #IN RELEASE DEVE ESSERE /D "NDEBUG" /mktyplib203 
	WORKING_DIRECTORY ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME}
	DEPENDS ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
	DEPENDS ${GeckoSDK_XPIDL_EXECUTABLE}
)


INCLUDE_DIRECTORIES(
	${GeckoSDK_INCLUDE_DIR}
	${CURL_INCLUDE_DIR}
	${UNRAR_INCLUDE_DIR}
	${${PROJECT_NAME}_GEN_INC_DIR}
	${OSG4WEB_ROOT}/res/${PROJECT_NAME} #TODO: sistemare
	)

IF(MSVC)
	ADD_DEFINITIONS(-D_USRDLL -D_WINDOWS -D_MFCAPP)
ENDIF(MSVC)

SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_GEN_INC_DIR}/${IDL_FILENAME}.h PROPERTIES GENERATED ON)

ADD_DEFINITIONS(-DOSG4WEB_UTILITIES_LIBRARY_STATIC)

ADD_LIBRARY(${PROJECT_NAME}
    MODULE
    ${CommonShell_include_FILES}
    ${${PROJECT_NAME}_include_FILES}
    ${${PROJECT_NAME}_GEN_INC_DIR}/${IDL_FILENAME}.h
    ${CommonShell_src_FILES}
    ${${PROJECT_NAME}_src_FILES}
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GeckoSDK_NSPR4_LIBRARY} ${GeckoSDK_XPCOM_LIBRARY} ${GeckoSDK_PLC4_LIBRARY} ${GeckoSDK_PLDS4_LIBRARY} ${CURL_LIBRARY} ${UNRAR_LIBRARY} Utilities )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${ADDITIONAL_LIBRARY})

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PROJECT_LABEL "Shell_${PROJECT_NAME}")


IF(FIREFOX_PLUGIN_DIR)
	GET_TARGET_PROPERTY(${PROJECT_NAME}_LOCATION ${PROJECT_NAME} LOCATION)
	GET_FILENAME_COMPONENT( MYNAME ${${PROJECT_NAME}_LOCATION} NAME)
	ADD_CUSTOM_COMMAND(
			OUTPUT ${FIREFOX_PLUGIN_DIR}/${MYNAME}
    		COMMAND ${CMAKE_COMMAND}
    		ARGS -E copy ${${PROJECT_NAME}_LOCATION} ${FIREFOX_PLUGIN_DIR}
		DEPENDS ${PROJECT_NAME}
    	)
ENDIF(FIREFOX_PLUGIN_DIR)




#TODO midl.exe /D "_DEBUG" /nologo /char signed /env win32  /tlb ".\Debug/osgactivex.tlb" /h "./idl/osgactivexidl.h"
#TODO midl.exe /D "NDEBUG" /mktyplib203 /nologo /char signed /env win32  /tlb ".\Release/osgactivex.tlb" /h "./idl/osgactivexidl.h"