PROJECT(npOSG4Web)
IF(NOT OSG4WEB_ROOT)
	GET_FILENAME_COMPONENT(OSG4WEB_ROOT "${PROJECT_SOURCE_DIR}/../.." ABSOLUTE CACHE)
ENDIF(NOT OSG4WEB_ROOT)

	
FOREACH(myvar include idl src res)
	SET("${PROJECT_NAME}_${myvar}" ${OSG4WEB_ROOT}/${myvar}/${PROJECT_NAME} CACHE PATH "${myvar} dir for ${PROJECT_NAME}")
	MARK_AS_ADVANCED("${PROJECT_NAME}_${myvar}")
	GRAB_FILES("${PROJECT_NAME}_${myvar}")
ENDFOREACH(myvar)

IF(WIN32)
        SET(${PROJECT_NAME}_src_FILES ${${PROJECT_NAME}_src_FILES} ${${PROJECT_NAME}_res_FILES})
ENDIF(WIN32)


FOREACH(myvar include src)
#	SET("CommonShell_${myvar}" ${OSG4WEB_ROOT}/${myvar}/CommonShell CACHE PATH "${myvar} dir for CommonShell")
#	MARK_AS_ADVANCED("CommonShell_${myvar}")
	SET("CommonShell_${myvar}" ${OSG4WEB_ROOT}/${myvar}/CommonShell)
	GRAB_FILES("CommonShell_${myvar}")
ENDFOREACH(myvar)

SET(GeckoSDK_ROOT ${OSG4WEB_ROOT}/var/dependancies/gecko-sdk CACHE PATH "base dir for Firefox Gecko SDK")
FIND_PACKAGE(GeckoSDK QUIET)
IF(NOT GeckoSDK_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(GeckoSDK)
ENDIF(NOT GeckoSDK_FOUND)

SET(CURL_ROOT ${OSG4WEB_ROOT}/var/dependancies/cmcurl CACHE PATH "base dir for cURL Library")
FIND_PACKAGE(CURL QUIET)
ADD_DEFINITIONS(-DHAVE_CONFIG_H -DCURL_STATICLIB)
IF(MSVC)
        SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:LIBCMT")
        SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /NODEFAULTLIB:LIBCMT")
        SET(CURL_LIBRARY "${CURL_LIBRARY};ws2_32.lib ;winmm.lib")
ENDIF(MSVC)
IF(NOT CURL_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(CURL)
ENDIF(NOT CURL_FOUND)

SET(UNRAR_ROOT ${OSG4WEB_ROOT}/var/dependancies/unrarlib CACHE PATH "base dir for UnRAR Library")
FIND_PACKAGE(UNRAR QUIET)
IF(NOT UNRAR_FOUND)
	SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR};${CMAKE_MODULE_PATH}")
	FIND_PACKAGE(UNRAR)
ENDIF(NOT UNRAR_FOUND)

#set up folder for generated include files
SET(${PROJECT_NAME}_GEN_INC_DIR ${CMAKE_CURRENT_BINARY_DIR}/include)
FILE(MAKE_DIRECTORY ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME})
SET(IDL_FILENAME npOSG4Web_nsIScriptablePlugin)
ADD_CUSTOM_COMMAND(
	OUTPUT ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME}/${IDL_FILENAME}.h
	COMMAND ${GeckoSDK_XPIDL_EXECUTABLE} -w -v -m header -I${GeckoSDK_IDL_DIR} ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
	WORKING_DIRECTORY ${${PROJECT_NAME}_GEN_INC_DIR}/${PROJECT_NAME}
	DEPENDS ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
	DEPENDS ${GeckoSDK_XPIDL_EXECUTABLE}
)

INCLUDE_DIRECTORIES(
	${GeckoSDK_INCLUDE_DIR}
	${CURL_INCLUDE_DIR}
	${UNRAR_INCLUDE_DIR}
	${${PROJECT_NAME}_GEN_INC_DIR} 
)
IF(MSVC)
#	ADD_DEFINITIONS(-DMOZILLA_STRICT_API -DXPCOM_GLUE -DXP_WIN -D_DXP_WIN32 -D_X86_ -D_USRDLL)
	ADD_DEFINITIONS(-DMOZILLA_STRICT_API -DXPCOM_GLUE -DXP_WIN -D_X86_ -D_USRDLL)
ENDIF(MSVC)

SET_SOURCE_FILES_PROPERTIES(${${PROJECT_NAME}_GEN_INC_DIR}/${IDL_FILENAME}.h PROPERTIES GENERATED ON)

ADD_DEFINITIONS(-DOSG4WEB_UTILITIES_LIBRARY_STATIC)

ADD_LIBRARY(${PROJECT_NAME}
    MODULE
    ${CommonShell_include_FILES}
    ${${PROJECT_NAME}_include_FILES}
    ${${PROJECT_NAME}_GEN_INC_DIR}/${IDL_FILENAME}.h
    ${CommonShell_src_FILES}
    ${${PROJECT_NAME}_src_FILES}
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GeckoSDK_NSPR4_LIBRARY} ${GeckoSDK_XPCOM_LIBRARY} ${GeckoSDK_PLC4_LIBRARY} ${GeckoSDK_PLDS4_LIBRARY}  ${UNRAR_LIBRARY} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} optimized ${CURL_LIBRARY} debug ${CURL_LIBRARY_DEBUG} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} Utilities )

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PROJECT_LABEL "Shell_${PROJECT_NAME}")

#SET(SOURCE_FILES ${CommonShell_src_FILES} ${${PROJECT_NAME}_src_FILES})
#SET(HEADER_FILES ${CommonShell_include_FILES} ${${PROJECT_NAME}_include_FILES})

	IF(FIREFOX_PLUGIN_DIR)
		GET_TARGET_PROPERTY(${PROJECT_NAME}_LOCATION ${PROJECT_NAME} LOCATION)
		GET_FILENAME_COMPONENT( MYNAME ${${PROJECT_NAME}_LOCATION} NAME)
#		ADD_CUSTOM_COMMAND(${OUTPUT_LIBDIR}/
#  		ADD_CUSTOM_COMMAND(
#    		TARGET ${PROJECT_NAME}
#    		POST_BUILD
#    		COMMAND ${CMAKE_COMMAND}
#    		ARGS -E copy ${${PROJECT_NAME}_LOCATION} ${FIREFOX_PLUGIN_DIR}
#    	)
  		ADD_CUSTOM_COMMAND(
				OUTPUT ${FIREFOX_PLUGIN_DIR}/${MYNAME}
    		COMMAND ${CMAKE_COMMAND}
    		ARGS -E copy ${${PROJECT_NAME}_LOCATION} ${FIREFOX_PLUGIN_DIR}
    		DEPENDS ${PROJECT_NAME}
    	)
		ADD_CUSTOM_COMMAND(
			OUTPUT ${FIREFOX_PLUGIN_DIR}/${PROJECT_NAME}.xpt
			COMMAND ${GeckoSDK_XPIDL_EXECUTABLE} -w -v -m typelib -I${GeckoSDK_IDL_DIR} ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
			COMMAND ${GeckoSDK_XPT_LINK_EXECUTABLE} ${FIREFOX_PLUGIN_DIR}/${PROJECT_NAME}.xpt ${IDL_FILENAME}.xpt 
			WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
			DEPENDS ${${PROJECT_NAME}_idl}/${IDL_FILENAME}.idl
			DEPENDS ${GeckoSDK_XPIDL_EXECUTABLE}
			DEPENDS ${GeckoSDK_XPT_LINK_EXECUTABLE}
		)
		SET(TGT ${FIREFOX_PLUGIN_DIR}/${PROJECT_NAME}.xpt ${FIREFOX_PLUGIN_DIR}/${MYNAME})
		ADD_CUSTOM_TARGET(Shell_${PROJECT_NAME}_Prepare_XPT
			DEPENDS ${FIREFOX_PLUGIN_DIR}/${MYNAME}
			DEPENDS ${FIREFOX_PLUGIN_DIR}/${PROJECT_NAME}.xpt
		)
		FOREACH(BTYPE Debug Release)
			SET(FIREFOX_STUFF_LIST_${BTYPE} "${FIREFOX_STUFF_LIST_${BTYPE}} ${FIREFOX_PLUGIN_DIR}/${PROJECT_NAME}.xpt ${FIREFOX_PLUGIN_DIR}/${MYNAME}") 
#			MESSAGE("inside ${PROJECT_NAME} FIREFOX_STUFF_LIST_${BTYPE}-->${FIREFOX_STUFF_LIST_${BTYPE}}<--")
		ENDFOREACH(BTYPE Debug Release)
	ENDIF(FIREFOX_PLUGIN_DIR)

#GET_CMAKE_PROPERTY(MYVARS VARIABLES)
#FOREACH(myvar ${MYVARS})
#	FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/AllVariables.txt
#		"${myvar} -->${${myvar}}<-\n"
#	)
#ENDFOREACH(myvar)

#########attenzione, inserire flags di compilazione:
#  debug
# MOZILLA_STRICT_API;XPCOM_GLUE;XP_WIN;XP_WIN32;_X86_;WIN32;_WINDOWS;_DEBUG;_USRDLL
#
#  release
# MOZILLA_STRICT_API;XPCOM_GLUE;XP_WIN32;XP_WIN;_X86_;WIN32;_WINDOWS;NDEBUG;_USRDLL
